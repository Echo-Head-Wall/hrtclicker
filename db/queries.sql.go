// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package db

import (
	"context"
	"time"
)

const deleteLastDose = `-- name: DeleteLastDose :exec
DELETE FROM hrt_history WHERE dosage_at = (SELECT dosage_at FROM hrt_history WHERE hrt_history.hrt_type = ? ORDER BY dosage_at DESC LIMIT 1)
`

func (q *Queries) DeleteLastDose(ctx context.Context, hrtType string) error {
	_, err := q.db.ExecContext(ctx, deleteLastDose, hrtType)
	return err
}

const dosageHistory = `-- name: DosageHistory :many
SELECT dosage_at, hrt_type FROM hrt_history WHERE hrt_type = ? ORDER BY dosage_at DESC
`

func (q *Queries) DosageHistory(ctx context.Context, hrtType string) ([]HRTHistory, error) {
	rows, err := q.db.QueryContext(ctx, dosageHistory, hrtType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HRTHistory
	for rows.Next() {
		var i HRTHistory
		if err := rows.Scan(&i.DosageAt, &i.HRTType); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const lastDose = `-- name: LastDose :one
SELECT dosage_at, hrt_type FROM hrt_history WHERE hrt_type = ? ORDER BY dosage_at DESC LIMIT 1
`

func (q *Queries) LastDose(ctx context.Context, hrtType string) (HRTHistory, error) {
	row := q.db.QueryRowContext(ctx, lastDose, hrtType)
	var i HRTHistory
	err := row.Scan(&i.DosageAt, &i.HRTType)
	return i, err
}

const markNotified = `-- name: MarkNotified :exec
INSERT INTO notified (dosage_at) VALUES (?)
`

func (q *Queries) MarkNotified(ctx context.Context, dosageAt time.Time) error {
	_, err := q.db.ExecContext(ctx, markNotified, dosageAt)
	return err
}

const recordDosage = `-- name: RecordDosage :exec
INSERT INTO hrt_history (hrt_type) VALUES (?)
`

func (q *Queries) RecordDosage(ctx context.Context, hrtType string) error {
	_, err := q.db.ExecContext(ctx, recordDosage, hrtType)
	return err
}
